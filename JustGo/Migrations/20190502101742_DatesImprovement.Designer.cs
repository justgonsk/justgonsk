// <auto-generated />
using System;
using JustGoUtilities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JustGo.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20190502101742_DatesImprovement")]
    partial class DatesImprovement
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JustGoModels.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("JustGoModels.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyText");

                    b.Property<string>("Description");

                    b.Property<string>("Images");

                    b.Property<int>("PlaceId");

                    b.Property<string>("ScheduledDates");

                    b.Property<string>("ShortTitle");

                    b.Property<string>("SingleDates");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("JustGoModels.Models.EventCategory", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<int>("CategoryId");

                    b.HasKey("EventId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("JustGoModels.Models.EventDate", b =>
                {
                    b.Property<int>("EventDateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("End");

                    b.Property<int>("EventId");

                    b.Property<DateTime?>("Start");

                    b.HasKey("EventDateId");

                    b.HasIndex("EventId");

                    b.ToTable("EventDates");
                });

            modelBuilder.Entity("JustGoModels.Models.EventTag", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<int>("TagId");

                    b.HasKey("EventId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EventTags");
                });

            modelBuilder.Entity("JustGoModels.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("JustGoModels.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("JustGoUtilities.Data.EventsKeyMapping", b =>
                {
                    b.Property<int>("KudagoId");

                    b.Property<int>("OurId");

                    b.HasKey("KudagoId");

                    b.HasIndex("OurId");

                    b.ToTable("EventsKeyMappings");
                });

            modelBuilder.Entity("JustGoUtilities.Data.PlacesKeyMapping", b =>
                {
                    b.Property<int>("KudagoId");

                    b.Property<int>("OurId");

                    b.HasKey("KudagoId");

                    b.HasIndex("OurId");

                    b.ToTable("PlacesKeyMappings");
                });

            modelBuilder.Entity("JustGoModels.Models.Event", b =>
                {
                    b.HasOne("JustGoModels.Models.Place", "Place")
                        .WithMany("Events")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustGoModels.Models.EventCategory", b =>
                {
                    b.HasOne("JustGoModels.Models.Category", "Category")
                        .WithMany("EventCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustGoModels.Models.Event", "Event")
                        .WithMany("EventCategories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustGoModels.Models.EventDate", b =>
                {
                    b.HasOne("JustGoModels.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustGoModels.Models.EventTag", b =>
                {
                    b.HasOne("JustGoModels.Models.Event", "Event")
                        .WithMany("EventTags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JustGoModels.Models.Tag", "Tag")
                        .WithMany("EventTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustGoModels.Models.Place", b =>
                {
                    b.OwnsOne("JustGoModels.Models.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<int?>("PlaceId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("Latitude");

                            b1.Property<double>("Longitude");

                            b1.ToTable("Places");

                            b1.HasOne("JustGoModels.Models.Place")
                                .WithOne("Coordinates")
                                .HasForeignKey("JustGoModels.Models.Coordinates", "PlaceId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("JustGoUtilities.Data.EventsKeyMapping", b =>
                {
                    b.HasOne("JustGoModels.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("OurId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JustGoUtilities.Data.PlacesKeyMapping", b =>
                {
                    b.HasOne("JustGoModels.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("OurId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
